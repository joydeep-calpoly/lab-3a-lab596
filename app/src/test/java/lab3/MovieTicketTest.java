/*
 * This source file was generated by the Gradle 'init' task
 */
package lab3;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.time.LocalTime;


class MovieTicketTest {

    static LocalTime begin;
    static LocalTime end;

    @BeforeAll
    public static void setUp(){
        begin = LocalTime.now();
        end = LocalTime.now().plusHours(2);
    }
    
    @Test
    void testExceptions() {
        assertThrows(NullPointerException.class, () -> 
            new MovieTicketPriceCalculator(null, null, 0, 0)
        );
        LocalTime start = LocalTime.now();
        assertThrows(NullPointerException.class, () -> 
            new MovieTicketPriceCalculator(start, null, 0, 0)
        );
        LocalTime finish = LocalTime.now().minusHours(1);
        assertThrows(IllegalArgumentException.class, () -> 
        new MovieTicketPriceCalculator(start, finish, 0, 0)
        );
    }

    @Test
    void testDiscount() {
        MovieTicketPriceCalculator mt = new MovieTicketPriceCalculator(begin, end, 3, 50);
        int discount = mt.computeDiscount(10);
        assertEquals(0, discount);
        discount = mt.computeDiscount(2);
        assertEquals(300, discount);
        discount = mt.computeDiscount(89);
        assertEquals(400, discount);
    }

    @Test
    void computePrice(){
        MovieTicketPriceCalculator mt = new MovieTicketPriceCalculator(begin, end, 10, 80);
        int price = mt.computePrice(begin.plusMinutes(30), 19);
        assertEquals(2400, price);
        price = mt.computePrice(end.minusMinutes(3), 5);
        assertEquals(2100, price);
        price = mt.computePrice(begin, 83);
        assertEquals(2000, price);
        price = mt.computePrice(end, 83);
        assertEquals(2300, price);
        price = mt.computePrice(begin.minusMinutes(200), 5);
        assertEquals(2400, price);
        price = mt.computePrice(end.plusHours(3), 54);
        assertEquals(2700, price);
    }

    @Test
    void abnormalities(){
        MovieTicketPriceCalculator mt = new MovieTicketPriceCalculator(begin, end, 50, 50);
        int price = mt.computePrice(begin.plusMinutes(30), 19);
        assertEquals(2100, price);
        price = mt.computePrice(end.minusMinutes(3), 5);
        assertEquals(2100, price);
        price = mt.computePrice(end.plusHours(3), 54);
        assertEquals(2300, price);
        mt = new MovieTicketPriceCalculator(begin, end, 55, 45);
        price = mt.computePrice(end.plusHours(3), 54);
        assertEquals(2300, price);
    }
}
